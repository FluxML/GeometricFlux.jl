var documenterSearchIndex = {"docs":
[{"location":"manual/featuredgraph/#FeaturedGraph","page":"FeaturedGraph","title":"FeaturedGraph","text":"","category":"section"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"NullGraph","category":"page"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"FeaturedGraph","category":"page"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"graph","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.graph","page":"FeaturedGraph","title":"GraphSignals.graph","text":"graph(::AbstractFeaturedGraph)\n\nGet referenced graph.\n\n\n\n\n\nSupport adjacency matrix\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"node_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.node_feature","page":"FeaturedGraph","title":"GraphSignals.node_feature","text":"node_feature(::AbstractFeaturedGraph)\n\nGet node feature attached to graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"edge_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.edge_feature","page":"FeaturedGraph","title":"GraphSignals.edge_feature","text":"edge_feature(::AbstractFeaturedGraph)\n\nGet edge feature attached to graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"global_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.global_feature","page":"FeaturedGraph","title":"GraphSignals.global_feature","text":"global_feature(::AbstractFeaturedGraph)\n\nGet global feature attached to graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_graph","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_graph","page":"FeaturedGraph","title":"GraphSignals.has_graph","text":"has_graph(::AbstractFeaturedGraph)\n\nCheck if graph is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_node_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_node_feature","page":"FeaturedGraph","title":"GraphSignals.has_node_feature","text":"has_node_feature(::AbstractFeaturedGraph)\n\nCheck if node feature is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_edge_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_edge_feature","page":"FeaturedGraph","title":"GraphSignals.has_edge_feature","text":"has_edge_feature(::AbstractFeaturedGraph)\n\nCheck if edge feature is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/featuredgraph/","page":"FeaturedGraph","title":"FeaturedGraph","text":"has_global_feature","category":"page"},{"location":"manual/featuredgraph/#GraphSignals.has_global_feature","page":"FeaturedGraph","title":"GraphSignals.has_global_feature","text":"has_global_feature(::AbstractFeaturedGraph)\n\nCheck if global feature is available or not.\n\n\n\n\n\n","category":"function"},{"location":"manual/linearalgebra/#Linear-algebraic-APIs","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"","category":"section"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"adjacency_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"degrees","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"degree_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"inv_sqrt_degree_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"laplacian_matrix","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"laplacian_matrix!","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"normalized_laplacian","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"normalized_laplacian!","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"scaled_laplacian","category":"page"},{"location":"manual/linearalgebra/","page":"Linear algebraic APIs","title":"Linear algebraic APIs","text":"scaled_laplacian!","category":"page"},{"location":"manual/graph/#Graph-related-APIs","page":"Graph-related APIs","title":"Graph-related APIs","text":"","category":"section"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"nv","category":"page"},{"location":"manual/graph/#LightGraphs.nv","page":"Graph-related APIs","title":"LightGraphs.nv","text":"nv(::AbstractFeaturedGraph)\n\nGet node number of graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"ne","category":"page"},{"location":"manual/graph/#LightGraphs.ne","page":"Graph-related APIs","title":"LightGraphs.ne","text":"ne(::AbstractFeaturedGraph)\n\nGet edge number of graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"adjacency_list","category":"page"},{"location":"manual/graph/#GraphSignals.adjacency_list","page":"Graph-related APIs","title":"GraphSignals.adjacency_list","text":"adjacency_list(adj)\n\nTransform a adjacency matrix into a adjacency list.\n\n\n\n\n\nadjacency_list(::AbstractFeaturedGraph)\n\nGet adjacency list of graph.\n\n\n\n\n\n","category":"function"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"is_directed","category":"page"},{"location":"manual/graph/","page":"Graph-related APIs","title":"Graph-related APIs","text":"fetch_graph","category":"page"},{"location":"manual/graph/#GraphSignals.fetch_graph","page":"Graph-related APIs","title":"GraphSignals.fetch_graph","text":"fetch_graph(g1, g2)\n\nFetch graph from g1 or g2. If there is only one graph available, fetch that one. Otherwise, fetch the first one.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GraphSignals","category":"page"},{"location":"#GraphSignals","page":"Home","title":"GraphSignals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GraphSignals]","category":"page"},{"location":"#GraphSignals.EdgeIndex","page":"Home","title":"GraphSignals.EdgeIndex","text":"A indexing structure for accessing neighbors of a vertex. \n\n\n\n\n\n","category":"type"},{"location":"#GraphSignals.FeaturedGraph","page":"Home","title":"GraphSignals.FeaturedGraph","text":"FeaturedGraph(graph, node_feature, edge_feature, global_feature, mt, directed)\n\nA feature-equipped graph structure for passing graph to layer in order to provide graph dynamically. References to graph or features are hold in this type.\n\nArguments\n\ngraph: should be a adjacency matrix, SimpleGraph, SimpleDiGraph (from LightGraphs) or SimpleWeightedGraph,\n\nSimpleWeightedDiGraph (from SimpleWeightedGraphs).\n\nnode_feature: node features attached to graph.\nedge_feature: edge features attached to graph.\ngloabl_feature: gloabl graph features attached to graph.\nmask: mask for graph.\nmt: matrix type for graph in matrix form. if graph is in matrix form, mt is recorded as one of :adjm,\n\n:laplacian, :normalized or :scaled. Otherwise, :nonmatrix is recorded.\n\ndirected: the direction of graph. it is true for directed graph; it is false for undirected graph.\n\n\n\n\n\n","category":"type"},{"location":"#GraphSignals.NullGraph","page":"Home","title":"GraphSignals.NullGraph","text":"NullGraph()\n\nNull object for FeaturedGraph.\n\n\n\n\n\n","category":"type"},{"location":"#GraphSignals.adjacency_list-Tuple{NullGraph}","page":"Home","title":"GraphSignals.adjacency_list","text":"adjacency_list(::AbstractFeaturedGraph)\n\nGet adjacency list of graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.adjacency_list-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"Home","title":"GraphSignals.adjacency_list","text":"adjacency_list(adj)\n\nTransform a adjacency matrix into a adjacency list.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.aggregate_index","page":"Home","title":"GraphSignals.aggregate_index","text":"aggregate_index(ei; direction=:undirected, kind=:edge)\n\nGenerate index structure for scatter operation.\n\nArguments\n\nei::EdgeIndex: The reference graph.\ndirection::Symbol: The direction of an edge to be choose to aggregate. It must be one of :undirected, :inward and :outward.\nkind::Symbol: To aggregate feature upon edge or vertex. It must be one of :edge and :vertex.\n\n\n\n\n\n","category":"function"},{"location":"#GraphSignals.edge_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.edge_feature","text":"edge_feature(::AbstractFeaturedGraph)\n\nGet edge feature attached to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.edge_scatter-Tuple{Any, AbstractArray, EdgeIndex}","page":"Home","title":"GraphSignals.edge_scatter","text":"edge_scatter(aggr, E, ei, direction=:undirected)\n\nScatter operation for aggregating edge feature into vertex feature.\n\nArguments\n\naggr: aggregating operators, e.g. +.\nE: Edge features with size of (#feature, #edge).\nei::EdgeIndex: The reference graph.\ndirection::Symbol: The direction of an edge to be choose to aggregate. It must be one of :undirected, :inward and :outward.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.fetch_graph-Tuple{NullGraph, FeaturedGraph}","page":"Home","title":"GraphSignals.fetch_graph","text":"fetch_graph(g1, g2)\n\nFetch graph from g1 or g2. If there is only one graph available, fetch that one. Otherwise, fetch the first one.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.global_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.global_feature","text":"global_feature(::AbstractFeaturedGraph)\n\nGet global feature attached to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.graph-Tuple{GraphMask}","page":"Home","title":"GraphSignals.graph","text":"Support adjacency matrix\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.graph-Tuple{NullGraph}","page":"Home","title":"GraphSignals.graph","text":"graph(::AbstractFeaturedGraph)\n\nGet referenced graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_edge_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_edge_feature","text":"has_edge_feature(::AbstractFeaturedGraph)\n\nCheck if edge feature is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_global_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_global_feature","text":"has_global_feature(::AbstractFeaturedGraph)\n\nCheck if global feature is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_graph-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_graph","text":"has_graph(::AbstractFeaturedGraph)\n\nCheck if graph is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.has_node_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.has_node_feature","text":"has_node_feature(::AbstractFeaturedGraph)\n\nCheck if node feature is available or not.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.mask-Tuple{AbstractFeaturedGraph, AbstractArray}","page":"Home","title":"GraphSignals.mask","text":"mask(fg, m)\n\nA syntax sugar for masking graph.\n\nReturns a GraphMask.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.neighbor_scatter-Union{Tuple{T}, Tuple{Any, AbstractArray{T, N} where N, EdgeIndex}} where T","page":"Home","title":"GraphSignals.neighbor_scatter","text":"neighbor_scatter(aggr, X, ei, direction=:undirected)\n\nScatter operation for aggregating neighbor vertex feature together.\n\nArguments\n\naggr: aggregating operators, e.g. +.\nX: Vertex features with size of (#feature, #vertex).\nei::EdgeIndex: The reference graph.\ndirection::Symbol: The direction of an edge to be choose to aggregate. It must be one of :undirected, :inward and :outward.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.node_feature-Tuple{NullGraph}","page":"Home","title":"GraphSignals.node_feature","text":"node_feature(::AbstractFeaturedGraph)\n\nGet node feature attached to graph.\n\n\n\n\n\n","category":"method"},{"location":"#GraphSignals.order_edges-Tuple{AbstractVector{var\"#s11\"} where var\"#s11\"<:(AbstractVector{T} where T)}","page":"Home","title":"GraphSignals.order_edges","text":"Order the edges in a graph by giving a unique integer to each edge.\n\n\n\n\n\n","category":"method"},{"location":"#LightGraphs.ne-Tuple{NullGraph}","page":"Home","title":"LightGraphs.ne","text":"ne(::AbstractFeaturedGraph)\n\nGet edge number of graph.\n\n\n\n\n\n","category":"method"},{"location":"#LightGraphs.nv-Tuple{NullGraph}","page":"Home","title":"LightGraphs.nv","text":"nv(::AbstractFeaturedGraph)\n\nGet node number of graph.\n\n\n\n\n\n","category":"method"}]
}
